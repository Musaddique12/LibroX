import React, { useState, useEffect } from "react";
import { db } from "../firebase"; // Firestore configuration
import { collection, query, orderBy, limit, startAfter, getDocs } from "firebase/firestore";

const HomePage = () => {
  const [books, setBooks] = useState([]); // To store the books
  const [page, setPage] = useState(1); // To track the current page
  const [loading, setLoading] = useState(false); // Loading state
  const [hasMore, setHasMore] = useState(true); // If more books are available
  const [pageDocs, setPageDocs] = useState({}); // Store the last document for each page

  // Function to fetch books from Firestore
  const fetchBooks = async () => {
    if (loading) return; // Prevent fetching while loading
    setLoading(true);

    try {
      let booksRef = collection(db, "books"); // Reference to the Firestore collection
      let booksQuery = query(booksRef, orderBy("title"), limit(20)); // Initial query to fetch 20 books
      
      // If we're on a page greater than 1, we fetch starting from the last document of the previous page
      if (page > 1 && pageDocs[page - 1]) {
        booksQuery = query(
          booksRef,
          orderBy("title"),
          startAfter(pageDocs[page - 1]), // Start after the last book of the previous page
          limit(20)
        );
      }

      const querySnapshot = await getDocs(booksQuery); // Fetch the books
      const newBooks = querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));

      setBooks(newBooks); // Set the books to state

      if (querySnapshot.docs.length < 20) {
        setHasMore(false); // No more books to load
      } else {
        // Save the last document reference for the current page
        setPageDocs((prevDocs) => ({
          ...prevDocs,
          [page]: querySnapshot.docs[querySnapshot.docs.length - 1], // Last book on the current page
        }));
      }
    } catch (error) {
      console.error("Error fetching books:", error);
    }

    setLoading(false); // Set loading to false once data is fetched
  };

  // Fetch books whenever the page changes
  useEffect(() => {
    fetchBooks();
  }, [page]); // Run when page changes

  // Handle "Next" button click
  const handleNextPage = () => {
    if (hasMore) {
      setPage((prevPage) => prevPage + 1); // Move to the next page
    }
  };

  // Handle "Previous" button click
  const handlePreviousPage = () => {
    if (page > 1) {
      setPage((prevPage) => prevPage - 1); // Move to the previous page
    }
  };

  return (
    <div>
      <h1>ðŸ“š Discover Books</h1>

      {/* Display the books */}
      <div className="book-list">
        {books.map((book) => (
          <div key={book.id} className="book-card">
            <img src={book.image} alt={book.title} />
            <h3>{book.title}</h3>
          </div>
        ))}
      </div>

      {/* Pagination buttons */}
      <div className="pagination">
        <button onClick={handlePreviousPage} disabled={page === 1}>
          Previous
        </button>
        <button onClick={handleNextPage} disabled={!hasMore}>
          Next
        </button>
      </div>

      {/* Loading indicator */}
      {loading && <p>Loading...</p>}
    </div>
  );
};

export default HomePage;
